import { NextRequest, NextResponse } from "next/server";
import { readFile } from "fs/promises";
import { join } from "path";

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const filePath = searchParams.get("path");

    if (!filePath) {
      return NextResponse.json(
        { error: "File path is required" },
        { status: 400 }
      );
    }

    // Security: Only allow downloading files from the logs directory
    if (!filePath.includes("logs/") || filePath.includes("..")) {
      return NextResponse.json({ error: "Invalid file path" }, { status: 403 });
    }

    // Convert .md path to .pdf path
    const pdfFilePath = filePath.replace(/\.md$/, ".pdf");

    // Resolve the full path relative to project root
    const fullPath = join(process.cwd(), pdfFilePath);

    // Read PDF file (should already exist, generated by agent)
    const pdfContent = await readFile(fullPath);

    // Get filename for download
    const filename = pdfFilePath.split("/").pop() || "report.pdf";

    // Return PDF as downloadable attachment
    return new NextResponse(pdfContent, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${filename}"`,
      },
    });
  } catch (error: any) {
    console.error("Download error:", error);

    if (error.code === "ENOENT") {
      return NextResponse.json({ error: "PDF file not found. The agent may not have generated it yet." }, { status: 404 });
    }

    return NextResponse.json(
      { error: "Failed to download file: " + error.message },
      { status: 500 }
    );
  }
}
